{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nimport { forwardRef, memo } from \"react\";\nimport { isUsingStaticRendering } from \"./staticRendering\";\nimport { useObserver } from \"./useObserver\"; // n.b. base case is not used for actual typings or exported in the typing files\n\nexport function observer(baseComponent, options) {\n  // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n  if (isUsingStaticRendering()) {\n    return baseComponent;\n  }\n\n  var realOptions = __assign({\n    forwardRef: false\n  }, options);\n\n  var baseComponentName = baseComponent.displayName || baseComponent.name;\n\n  var wrappedComponent = function wrappedComponent(props, ref) {\n    return useObserver(function () {\n      return baseComponent(props, ref);\n    }, baseComponentName);\n  }; // Don't set `displayName` for anonymous components,\n  // so the `displayName` can be customized by user, see #3192.\n\n\n  if (baseComponentName !== \"\") {\n    wrappedComponent.displayName = baseComponentName;\n  } // Support legacy context: `contextTypes` must be applied before `memo`\n\n\n  if (baseComponent.contextTypes) {\n    wrappedComponent.contextTypes = baseComponent.contextTypes;\n  } // memo; we are not interested in deep updates\n  // in props; we assume that if deep objects are changed,\n  // this is in observables, which would have been tracked anyway\n\n\n  var memoComponent;\n\n  if (realOptions.forwardRef) {\n    // we have to use forwardRef here because:\n    // 1. it cannot go before memo, only after it\n    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n    //    since it wouldn't be a callable function anymore\n    memoComponent = memo(forwardRef(wrappedComponent));\n  } else {\n    memoComponent = memo(wrappedComponent);\n  }\n\n  copyStaticProperties(baseComponent, memoComponent);\n\n  if (\"production\" !== process.env.NODE_ENV) {\n    Object.defineProperty(memoComponent, \"contextTypes\", {\n      set: function set() {\n        var _a;\n\n        throw new Error(\"[mobx-react-lite] `\".concat(this.displayName || ((_a = this.type) === null || _a === void 0 ? void 0 : _a.displayName) || \"Component\", \".contextTypes` must be set before applying `observer`.\"));\n      }\n    });\n  }\n\n  return memoComponent;\n} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\n\nvar hoistBlackList = {\n  $$typeof: true,\n  render: true,\n  compare: true,\n  type: true,\n  // Don't redefine `displayName`,\n  // it's defined as getter-setter pair on `memo` (see #3192).\n  displayName: true\n};\n\nfunction copyStaticProperties(base, target) {\n  Object.keys(base).forEach(function (key) {\n    if (!hoistBlackList[key]) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));\n    }\n  });\n}","map":{"version":3,"sources":["/home/rascal/Рабочий стол/git/todoList/node_modules/mobx-react-lite/src/observer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,SAAS,UAAT,EAAqB,IAArB,QAAiC,OAAjC;AAEA,SAAS,sBAAT,QAAuC,mBAAvC;AACA,SAAS,WAAT,QAA4B,eAA5B,C,CAmCA;;AACA,OAAM,SAAU,QAAV,CACF,aADE,EAEF,OAFE,EAEwB;AAE1B;AACA,MAAI,sBAAsB,EAA1B,EAA8B;AAC1B,WAAO,aAAP;AACH;;AAED,MAAM,WAAW,GAAA,QAAA,CAAA;AACb,IAAA,UAAU,EAAE;AADC,GAAA,EAEV,OAFU,CAAjB;;AAKA,MAAM,iBAAiB,GAAG,aAAa,CAAC,WAAd,IAA6B,aAAa,CAAC,IAArE;;AAEA,MAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,KAAD,EAAW,GAAX,EAA+B;AACpD,WAAO,WAAW,CAAC,YAAA;AAAM,aAAA,aAAa,CAAC,KAAD,EAAb,GAAa,CAAb;AAAyB,KAAhC,EAAkC,iBAAlC,CAAlB;AACH,GAFD,CAd0B,CAkB1B;AACA;;;AACA,MAAI,iBAAiB,KAAK,EAA1B,EAA8B;AAC1B,IAAA,gBAAgB,CAAC,WAAjB,GAA+B,iBAA/B;AACH,GAtByB,CAwB1B;;;AACA,MAAK,aAAqB,CAAC,YAA3B,EAAyC;AACrC,IAAA,gBAAgB,CAAC,YAAjB,GAAiC,aAAqB,CAAC,YAAvD;AACH,GA3ByB,CA6B1B;AACA;AACA;;;AACA,MAAI,aAAJ;;AACA,MAAI,WAAW,CAAC,UAAhB,EAA4B;AACxB;AACA;AACA;AACA;AACA,IAAA,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,gBAAD,CAAX,CAApB;AACH,GAND,MAMO;AACH,IAAA,aAAa,GAAG,IAAI,CAAC,gBAAD,CAApB;AACH;;AAED,EAAA,oBAAoB,CAAC,aAAD,EAAgB,aAAhB,CAApB;;AAEA,MAAI,iBAAiB,OAAO,CAAC,GAAR,CAAY,QAAjC,EAA2C;AACvC,IAAA,MAAM,CAAC,cAAP,CAAsB,aAAtB,EAAqC,cAArC,EAAqD;AACjD,MAAA,GAAG,EAAA,eAAA;;;AACC,cAAM,IAAI,KAAJ,CACF,sBAAA,MAAA,CACI,KAAK,WAAL,KAAoB,CAAA,EAAA,GAAA,KAAK,IAAL,MAAS,IAAT,IAAS,EAAA,KAAA,KAAA,CAAT,GAAS,KAAA,CAAT,GAAS,EAAA,CAAE,WAA/B,KAA8C,WADlD,EAC6D,wDAD7D,CADE,CAAN;AAKH;AAPgD,KAArD;AASH;;AAED,SAAO,aAAP;AACH,C,CAED;;AACA,IAAM,cAAc,GAAQ;AACxB,EAAA,QAAQ,EAAE,IADc;AAExB,EAAA,MAAM,EAAE,IAFgB;AAGxB,EAAA,OAAO,EAAE,IAHe;AAIxB,EAAA,IAAI,EAAE,IAJkB;AAKxB;AACA;AACA,EAAA,WAAW,EAAE;AAPW,CAA5B;;AAUA,SAAS,oBAAT,CAA8B,IAA9B,EAAyC,MAAzC,EAAoD;AAChD,EAAA,MAAM,CAAC,IAAP,CAAY,IAAZ,EAAkB,OAAlB,CAA0B,UAAA,GAAA,EAAG;AACzB,QAAI,CAAC,cAAc,CAAC,GAAD,CAAnB,EAA0B;AACtB,MAAA,MAAM,CAAC,cAAP,CAAsB,MAAtB,EAA8B,GAA9B,EAAmC,MAAM,CAAC,wBAAP,CAAgC,IAAhC,EAAsC,GAAtC,CAAnC;AACH;AACJ,GAJD;AAKH","sourcesContent":["import { forwardRef, memo } from \"react\"\n\nimport { isUsingStaticRendering } from \"./staticRendering\"\nimport { useObserver } from \"./useObserver\"\n\nexport interface IObserverOptions {\n    readonly forwardRef?: boolean\n}\n\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P>,\n    options: IObserverOptions & { forwardRef: true }\n): React.MemoExoticComponent<\n    React.ForwardRefExoticComponent<React.PropsWithoutRef<P> & React.RefAttributes<TRef>>\n>\n\nexport function observer<P extends object>(\n    baseComponent: React.FunctionComponent<P>,\n    options?: IObserverOptions\n): React.FunctionComponent<P>\n\nexport function observer<\n    C extends React.FunctionComponent<any> | React.RefForwardingComponent<any>,\n    Options extends IObserverOptions\n>(\n    baseComponent: C,\n    options?: Options\n): Options extends { forwardRef: true }\n    ? C extends React.RefForwardingComponent<infer TRef, infer P>\n        ? C &\n              React.MemoExoticComponent<\n                  React.ForwardRefExoticComponent<\n                      React.PropsWithoutRef<P> & React.RefAttributes<TRef>\n                  >\n              >\n        : never /* forwardRef set for a non forwarding component */\n    : C & { displayName: string }\n\n// n.b. base case is not used for actual typings or exported in the typing files\nexport function observer<P extends object, TRef = {}>(\n    baseComponent: React.RefForwardingComponent<TRef, P> | React.FunctionComponent<P>,\n    options?: IObserverOptions\n) {\n    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307\n    if (isUsingStaticRendering()) {\n        return baseComponent\n    }\n\n    const realOptions = {\n        forwardRef: false,\n        ...options\n    }\n\n    const baseComponentName = baseComponent.displayName || baseComponent.name\n\n    const wrappedComponent = (props: P, ref: React.Ref<TRef>) => {\n        return useObserver(() => baseComponent(props, ref), baseComponentName)\n    }\n\n    // Don't set `displayName` for anonymous components,\n    // so the `displayName` can be customized by user, see #3192.\n    if (baseComponentName !== \"\") {\n        wrappedComponent.displayName = baseComponentName\n    }\n\n    // Support legacy context: `contextTypes` must be applied before `memo`\n    if ((baseComponent as any).contextTypes) {\n        wrappedComponent.contextTypes = (baseComponent as any).contextTypes\n    }\n\n    // memo; we are not interested in deep updates\n    // in props; we assume that if deep objects are changed,\n    // this is in observables, which would have been tracked anyway\n    let memoComponent\n    if (realOptions.forwardRef) {\n        // we have to use forwardRef here because:\n        // 1. it cannot go before memo, only after it\n        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it\n        //    since it wouldn't be a callable function anymore\n        memoComponent = memo(forwardRef(wrappedComponent))\n    } else {\n        memoComponent = memo(wrappedComponent)\n    }\n\n    copyStaticProperties(baseComponent, memoComponent)\n\n    if (\"production\" !== process.env.NODE_ENV) {\n        Object.defineProperty(memoComponent, \"contextTypes\", {\n            set() {\n                throw new Error(\n                    `[mobx-react-lite] \\`${\n                        this.displayName || this.type?.displayName || \"Component\"\n                    }.contextTypes\\` must be set before applying \\`observer\\`.`\n                )\n            }\n        })\n    }\n\n    return memoComponent\n}\n\n// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js\nconst hoistBlackList: any = {\n    $$typeof: true,\n    render: true,\n    compare: true,\n    type: true,\n    // Don't redefine `displayName`,\n    // it's defined as getter-setter pair on `memo` (see #3192).\n    displayName: true\n}\n\nfunction copyStaticProperties(base: any, target: any) {\n    Object.keys(base).forEach(key => {\n        if (!hoistBlackList[key]) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key)!)\n        }\n    })\n}\n"]},"metadata":{},"sourceType":"module"}