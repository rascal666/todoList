{"ast":null,"code":"/** @format */\nimport { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\nconst inputValue = '';\n\nclass Todo {\n  // getlocalStorageTodo = () => {\n  //     const todo = localStorage.getItem('todo')\n  //     if (todo) {\n  //         return JSON.parse(todo)\n  //     } else {\n  //         return []\n  //     }\n  // }\n  constructor() {\n    this.todos = [];\n    this.todosFilter = [];\n    makeAutoObservable(this);\n  }\n\n  handleChange(event) {\n    console.log(event.target.value); // this.inputValue = event.target.value;\n  } // ! не работает с div\n\n\n  TodoFilters(status) {\n    if (status == 'true') {\n      status = true;\n    }\n\n    if (status == 'false') {\n      status = false;\n    }\n\n    if (status === 'all') {\n      this.todosFilter = this.todos;\n    } else {\n      this.todosFilter = this.todos.filter(item => item.status === status);\n    }\n  }\n\n  addTask() {\n    if (this.inputValue != '') {\n      this.todos.push({\n        title: this.inputValue,\n        id: uuidv4(),\n        status: true\n      });\n      this.todosFilter = this.todos;\n      this.inputValue = '';\n    }\n  }\n\n  keyDown(event) {\n    if (event.keyCode === 13) {\n      this.addTask();\n    }\n  }\n\n  statusTask(id) {\n    this.todos.filter(item => {\n      if (item.id === id) {\n        item.status = !item.status;\n      }\n\n      return item;\n    });\n  }\n\n  deliteTask(id) {\n    this.todos = this.todos.filter(item => item.id !== id);\n    this.todosFilter = this.todos;\n  }\n\n}\n\nexport default new Todo();","map":{"version":3,"sources":["/home/rascal/Рабочий стол/git/todoList/src/store/todo.tsx"],"names":["makeAutoObservable","v4","uuidv4","inputValue","Todo","constructor","todos","todosFilter","handleChange","event","console","log","target","value","TodoFilters","status","filter","item","addTask","push","title","id","keyDown","keyCode","statusTask","deliteTask"],"mappings":"AAAA;AAEA,SAASA,kBAAT,QAAmC,MAAnC;AAEA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;AASA,MAAMC,UAAkB,GAAG,EAA3B;;AAIA,MAAMC,IAAN,CAAW;AAOV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,WAAW,GAAG;AAAA,SAddC,KAcc,GAdO,EAcP;AAAA,SAbdC,WAac,GAbY,EAaZ;AACbP,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AAGDQ,EAAAA,YAAY,CAACC,KAAD,EAAmD;AAC9DC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,MAAN,CAAaC,KAAzB,EAD8D,CAI9D;AACA,GA1BS,CA4BV;;;AACAC,EAAAA,WAAW,CAACC,MAAD,EAAc;AACxB,QAAIA,MAAM,IAAI,MAAd,EAAsB;AACrBA,MAAAA,MAAM,GAAG,IAAT;AACA;;AACD,QAAIA,MAAM,IAAI,OAAd,EAAuB;AACtBA,MAAAA,MAAM,GAAG,KAAT;AACA;;AACD,QAAIA,MAAM,KAAK,KAAf,EAAsB;AACrB,WAAKR,WAAL,GAAmB,KAAKD,KAAxB;AACA,KAFD,MAEO;AACN,WAAKC,WAAL,GAAmB,KAAKD,KAAL,CAAWU,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACF,MAAL,KAAgBA,MAA5C,CAAnB;AACA;AACD;;AAEDG,EAAAA,OAAO,GAAG;AACT,QAAI,KAAKf,UAAL,IAAmB,EAAvB,EAA2B;AAC1B,WAAKG,KAAL,CAAWa,IAAX,CAAgB;AACfC,QAAAA,KAAK,EAAE,KAAKjB,UADG;AAEfkB,QAAAA,EAAE,EAAEnB,MAAM,EAFK;AAGfa,QAAAA,MAAM,EAAE;AAHO,OAAhB;AAKA,WAAKR,WAAL,GAAmB,KAAKD,KAAxB;AACA,WAAKH,UAAL,GAAkB,EAAlB;AACA;AACD;;AACDmB,EAAAA,OAAO,CAACb,KAAD,EAA6B;AACnC,QAAIA,KAAK,CAACc,OAAN,KAAkB,EAAtB,EAA0B;AACzB,WAAKL,OAAL;AACA;AACD;;AAIDM,EAAAA,UAAU,CAACH,EAAD,EAAY;AACrB,SAAKf,KAAL,CAAWU,MAAX,CAAmBC,IAAD,IAAU;AAC3B,UAAIA,IAAI,CAACI,EAAL,KAAYA,EAAhB,EAAoB;AACnBJ,QAAAA,IAAI,CAACF,MAAL,GAAc,CAACE,IAAI,CAACF,MAApB;AACA;;AACD,aAAOE,IAAP;AACA,KALD;AAMA;;AAEDQ,EAAAA,UAAU,CAACJ,EAAD,EAAY;AACrB,SAAKf,KAAL,GAAa,KAAKA,KAAL,CAAWU,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACI,EAAL,KAAYA,EAAxC,CAAb;AACA,SAAKd,WAAL,GAAmB,KAAKD,KAAxB;AACA;;AA1ES;;AA6EX,eAAe,IAAIF,IAAJ,EAAf","sourcesContent":["/** @format */\n\nimport { makeAutoObservable } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport interface TodoProps{\n\t\ttitle: string\n\t\tid: string\n\t\tstatus:boolean\n\t}\n\nconst inputValue: string = '';\n\n\t\n\t\nclass Todo {\n\t\n\ttodos: TodoProps [] =[];\n\ttodosFilter:TodoProps[] = [];\n\t\n\n\n\t// getlocalStorageTodo = () => {\n\t//     const todo = localStorage.getItem('todo')\n\t//     if (todo) {\n\t//         return JSON.parse(todo)\n\t//     } else {\n\t//         return []\n\t//     }\n\t// }\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\n\thandleChange(event: React.ChangeEvent<HTMLInputElement>): void {\n\t\tconsole.log(event.target.value);\n\t\t\n\t\t\n\t\t// this.inputValue = event.target.value;\n\t}\n\n\t// ! не работает с div\n\tTodoFilters(status: any) {\n\t\tif (status == 'true') {\n\t\t\tstatus = true;\n\t\t}\n\t\tif (status == 'false') {\n\t\t\tstatus = false;\n\t\t}\n\t\tif (status === 'all') {\n\t\t\tthis.todosFilter = this.todos;\n\t\t} else {\n\t\t\tthis.todosFilter = this.todos.filter((item) => item.status === status);\n\t\t}\n\t}\n\n\taddTask() {\n\t\tif (this.inputValue != '') {\n\t\t\tthis.todos.push({\n\t\t\t\ttitle: this.inputValue,\n\t\t\t\tid: uuidv4(),\n\t\t\t\tstatus: true,\n\t\t\t});\n\t\t\tthis.todosFilter = this.todos;\n\t\t\tthis.inputValue = '';\n\t\t}\n\t}\n\tkeyDown(event: React.KeyboardEvent) {\n\t\tif (event.keyCode === 13) {\n\t\t\tthis.addTask();\n\t\t}\n\t}\n\n\t\n\n\tstatusTask(id:string) {\n\t\tthis.todos.filter((item) => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem.status = !item.status;\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\t}\n\n\tdeliteTask(id:string) {\n\t\tthis.todos = this.todos.filter((item) => item.id !== id);\n\t\tthis.todosFilter = this.todos;\n\t}\n}\n\nexport default new Todo();\n"]},"metadata":{},"sourceType":"module"}