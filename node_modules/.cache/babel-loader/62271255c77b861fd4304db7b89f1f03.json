{"ast":null,"code":"/** @format */\nimport { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\n\nclass Todo {\n  constructor() {\n    this.todos = [];\n    this.todosFilter = [];\n    this.inputValue = '';\n    makeAutoObservable(this);\n  }\n\n  TodoFilters(status) {\n    if (status == 'true') {\n      status = true;\n    }\n\n    if (status == 'false') {\n      status = false;\n    }\n\n    if (status === 'all') {\n      this.todosFilter = this.todos;\n    } else {\n      this.todosFilter = this.todos.filter(item => item.status === status);\n    }\n  }\n\n  addTask() {\n    if (this.inputValue != '') {\n      this.todos.push({\n        title: this.inputValue,\n        id: uuidv4(),\n        status: true\n      });\n      this.todosFilter = this.todos;\n      this.inputValue = '';\n    }\n  }\n\n  keyDown(event) {\n    if (event.keyCode === 13) {\n      this.addTask();\n    }\n  }\n\n  statusTask(id) {\n    this.todos.filter(item => {\n      if (item.id === id) {\n        item.status = !item.status;\n      }\n\n      return item;\n    });\n  }\n\n  deliteTask(id) {\n    this.todos = this.todos.filter(item => item.id !== id);\n    this.todosFilter = this.todos;\n  }\n\n}\n\nexport default new Todo();","map":{"version":3,"sources":["/home/rascal/Рабочий стол/git/todoList/src/store/todo.tsx"],"names":["makeAutoObservable","v4","uuidv4","Todo","constructor","todos","todosFilter","inputValue","TodoFilters","status","filter","item","addTask","push","title","id","keyDown","event","keyCode","statusTask","deliteTask"],"mappings":"AAAA;AAEA,SAASA,kBAAT,QAAmC,MAAnC;AACA,SAASC,EAAE,IAAIC,MAAf,QAA6B,MAA7B;;AAUA,MAAMC,IAAN,CAAW;AASVC,EAAAA,WAAW,GAAG;AAAA,SANdC,KAMc,GANQ,EAMR;AAAA,SALdC,WAKc,GALY,EAKZ;AAAA,SAJdC,UAIc,GAJO,EAIP;AACbP,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AAEDQ,EAAAA,WAAW,CAACC,MAAD,EAAc;AACxB,QAAIA,MAAM,IAAI,MAAd,EAAsB;AACrBA,MAAAA,MAAM,GAAG,IAAT;AACA;;AACD,QAAIA,MAAM,IAAI,OAAd,EAAuB;AACtBA,MAAAA,MAAM,GAAG,KAAT;AACA;;AACD,QAAIA,MAAM,KAAK,KAAf,EAAsB;AACrB,WAAKH,WAAL,GAAmB,KAAKD,KAAxB;AACA,KAFD,MAEO;AACN,WAAKC,WAAL,GAAmB,KAAKD,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACF,MAAL,KAAgBA,MAA5C,CAAnB;AACA;AACD;;AAEDG,EAAAA,OAAO,GAAG;AACT,QAAI,KAAKL,UAAL,IAAmB,EAAvB,EAA2B;AAC1B,WAAKF,KAAL,CAAWQ,IAAX,CAAgB;AACfC,QAAAA,KAAK,EAAE,KAAKP,UADG;AAEfQ,QAAAA,EAAE,EAAEb,MAAM,EAFK;AAGfO,QAAAA,MAAM,EAAE;AAHO,OAAhB;AAKA,WAAKH,WAAL,GAAmB,KAAKD,KAAxB;AACA,WAAKE,UAAL,GAAkB,EAAlB;AACA;AACD;;AAEDS,EAAAA,OAAO,CAACC,KAAD,EAA6B;AACnC,QAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACzB,WAAKN,OAAL;AACA;AACD;;AAEDO,EAAAA,UAAU,CAACJ,EAAD,EAAY;AACrB,SAAKV,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAU;AAC3B,UAAIA,IAAI,CAACI,EAAL,KAAYA,EAAhB,EAAoB;AACnBJ,QAAAA,IAAI,CAACF,MAAL,GAAc,CAACE,IAAI,CAACF,MAApB;AACA;;AACD,aAAOE,IAAP;AACA,KALD;AAMA;;AAEDS,EAAAA,UAAU,CAACL,EAAD,EAAY;AACrB,SAAKV,KAAL,GAAa,KAAKA,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACI,EAAL,KAAYA,EAAxC,CAAb;AACA,SAAKT,WAAL,GAAmB,KAAKD,KAAxB;AACA;;AAzDS;;AA4DX,eAAe,IAAIF,IAAJ,EAAf","sourcesContent":["/** @format */\nimport React from \"react\";\nimport { makeAutoObservable } from 'mobx';\nimport { v4 as uuidv4 } from 'uuid';\n\n\nexport interface TodoProps{\n\t\ttitle: string\n\t\tid: string\n\t\tstatus:boolean\n\t}\n\n\t\nclass Todo {\n\n\n\ttodos: TodoProps [] = [];\n\ttodosFilter:TodoProps[] = [];\n\tinputValue: string = '';\n\n\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\n\tTodoFilters(status: any) {\n\t\tif (status == 'true') {\n\t\t\tstatus = true;\n\t\t}\n\t\tif (status == 'false') {\n\t\t\tstatus = false;\n\t\t}\n\t\tif (status === 'all') {\n\t\t\tthis.todosFilter = this.todos;\n\t\t} else {\n\t\t\tthis.todosFilter = this.todos.filter((item) => item.status === status);\t\t\n\t\t}\n\t}\n\n\taddTask() {\n\t\tif (this.inputValue != '') {\n\t\t\tthis.todos.push({\n\t\t\t\ttitle: this.inputValue,\n\t\t\t\tid: uuidv4(),\n\t\t\t\tstatus: true,\n\t\t\t});\n\t\t\tthis.todosFilter = this.todos;\n\t\t\tthis.inputValue = '';\n\t\t}\n\t}\n\n\tkeyDown(event: React.KeyboardEvent) {\n\t\tif (event.keyCode === 13) {\n\t\t\tthis.addTask();\n\t\t}\n\t}\n\n\tstatusTask(id:string) {\n\t\tthis.todos.filter((item) => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem.status = !item.status;\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\t}\n\n\tdeliteTask(id:string) {\n\t\tthis.todos = this.todos.filter((item) => item.id !== id);\n\t\tthis.todosFilter = this.todos;\n\t}\n}\n\nexport default new Todo();\n"]},"metadata":{},"sourceType":"module"}