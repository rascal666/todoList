{"ast":null,"code":"/** @format */\nimport { makeAutoObservable } from 'mobx';\n\nclass Todo {\n  // getlocalStorageTodo = () => {\n  //     const todo = localStorage.getItem('todo')\n  //     if (todo) {\n  //         return JSON.parse(todo)\n  //     } else {\n  //         return []\n  //     }\n  // }\n  constructor() {\n    this.todos = [];\n    this.todosFilter = [];\n    this.inputValue = '';\n    makeAutoObservable(this);\n  }\n\n  TodoFilters(status) {\n    if (status == 'true') {\n      status = true;\n    }\n\n    if (status == 'false') {\n      status = false;\n    }\n\n    if (status === 'all') {\n      this.todosFilter = this.todos;\n    } else {\n      this.todosFilter = this.todos.filter(item => item.status === status);\n    }\n  }\n\n  addTask(title) {\n    console.log(title);\n\n    if (this.inputValue != '') {\n      this.todosFilter = this.todos;\n      this.inputValue = '';\n    }\n  }\n\n  keyDown(event) {\n    if (event.keyCode === 13) {\n      this.addTask();\n    }\n  }\n\n  handleChange(event) {\n    this.inputValue = event.target.value;\n  }\n\n  statusTask(id) {\n    this.todos.filter(item => {\n      if (item.id === id) {\n        item.status = !item.status;\n      }\n\n      return item;\n    });\n  }\n\n  deliteTask(id) {\n    this.todos = this.todos.filter(item => item.id !== id);\n    this.todosFilter = this.todos;\n  }\n\n}\n\nexport default new Todo();","map":{"version":3,"sources":["/home/rascal/Рабочий стол/git/todoList/src/store/todo.tsx"],"names":["makeAutoObservable","Todo","constructor","todos","todosFilter","inputValue","TodoFilters","status","filter","item","addTask","title","console","log","keyDown","event","keyCode","handleChange","target","value","statusTask","id","deliteTask"],"mappings":"AAAA;AAEA,SAASA,kBAAT,QAAmC,MAAnC;;AASA,MAAMC,IAAN,CAAW;AAKV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEAC,EAAAA,WAAW,GAAG;AAAA,SAbdC,KAac,GAbN,EAaM;AAAA,SAZdC,WAYc,GAZA,EAYA;AAAA,SAXdC,UAWc,GAXO,EAWP;AACbL,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACA;;AACDM,EAAAA,WAAW,CAACC,MAAD,EAAS;AACnB,QAAIA,MAAM,IAAI,MAAd,EAAsB;AACrBA,MAAAA,MAAM,GAAG,IAAT;AACA;;AACD,QAAIA,MAAM,IAAI,OAAd,EAAuB;AACtBA,MAAAA,MAAM,GAAG,KAAT;AACA;;AACD,QAAIA,MAAM,KAAK,KAAf,EAAsB;AACrB,WAAKH,WAAL,GAAmB,KAAKD,KAAxB;AACA,KAFD,MAEO;AACN,WAAKC,WAAL,GAAmB,KAAKD,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACF,MAAL,KAAgBA,MAA5C,CAAnB;AACA;AACD;;AAEDG,EAAAA,OAAO,CAACC,KAAD,EAAe;AACrBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;;AAEA,QAAI,KAAKN,UAAL,IAAmB,EAAvB,EAA2B;AAE1B,WAAKD,WAAL,GAAmB,KAAKD,KAAxB;AACA,WAAKE,UAAL,GAAkB,EAAlB;AACA;AACD;;AACDS,EAAAA,OAAO,CAACC,KAAD,EAA6B;AACnC,QAAIA,KAAK,CAACC,OAAN,KAAkB,EAAtB,EAA0B;AACzB,WAAKN,OAAL;AACA;AACD;;AAEDO,EAAAA,YAAY,CAACF,KAAD,EAA6C;AACxD,SAAKV,UAAL,GAAkBU,KAAK,CAACG,MAAN,CAAaC,KAA/B;AACA;;AAEDC,EAAAA,UAAU,CAACC,EAAD,EAAK;AACd,SAAKlB,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAU;AAC3B,UAAIA,IAAI,CAACY,EAAL,KAAYA,EAAhB,EAAoB;AACnBZ,QAAAA,IAAI,CAACF,MAAL,GAAc,CAACE,IAAI,CAACF,MAApB;AACA;;AACD,aAAOE,IAAP;AACA,KALD;AAMA;;AAEDa,EAAAA,UAAU,CAACD,EAAD,EAAK;AACd,SAAKlB,KAAL,GAAa,KAAKA,KAAL,CAAWK,MAAX,CAAmBC,IAAD,IAAUA,IAAI,CAACY,EAAL,KAAYA,EAAxC,CAAb;AACA,SAAKjB,WAAL,GAAmB,KAAKD,KAAxB;AACA;;AA9DS;;AAiEX,eAAe,IAAIF,IAAJ,EAAf","sourcesContent":["/** @format */\n\nimport { makeAutoObservable } from 'mobx';\nimport { observer } from 'mobx-react-lite';\nimport { v4 as uuidv4 } from 'uuid';\n\n\ninterface TodoProps{\n\t\taddTask(title: string):void\n\t}\n\t\nclass Todo {\n\ttodos = [];\n\ttodosFilter = [];\n\tinputValue: string = '';\n\n\t// getlocalStorageTodo = () => {\n\t//     const todo = localStorage.getItem('todo')\n\t//     if (todo) {\n\t//         return JSON.parse(todo)\n\t//     } else {\n\t//         return []\n\t//     }\n\t// }\n\n\tconstructor() {\n\t\tmakeAutoObservable(this);\n\t}\n\tTodoFilters(status) {\n\t\tif (status == 'true') {\n\t\t\tstatus = true;\n\t\t}\n\t\tif (status == 'false') {\n\t\t\tstatus = false;\n\t\t}\n\t\tif (status === 'all') {\n\t\t\tthis.todosFilter = this.todos;\n\t\t} else {\n\t\t\tthis.todosFilter = this.todos.filter((item) => item.status === status);\n\t\t}\n\t}\n\n\taddTask(title:string) {\n\t\tconsole.log(title);\n\t\t\n\t\tif (this.inputValue != '') {\n\t\t\t\n\t\t\tthis.todosFilter = this.todos;\n\t\t\tthis.inputValue = '';\n\t\t}\n\t}\n\tkeyDown(event: React.KeyboardEvent) {\n\t\tif (event.keyCode === 13) {\n\t\t\tthis.addTask();\n\t\t}\n\t}\n\n\thandleChange(event: React.ChangeEvent<HTMLInputElement>) {\n\t\tthis.inputValue = event.target.value;\n\t}\n\n\tstatusTask(id) {\n\t\tthis.todos.filter((item) => {\n\t\t\tif (item.id === id) {\n\t\t\t\titem.status = !item.status;\n\t\t\t}\n\t\t\treturn item;\n\t\t});\n\t}\n\n\tdeliteTask(id) {\n\t\tthis.todos = this.todos.filter((item) => item.id !== id);\n\t\tthis.todosFilter = this.todos;\n\t}\n}\n\nexport default new Todo();\n"]},"metadata":{},"sourceType":"module"}