{"ast":null,"code":"import { createTrackingData } from \"./reactionCleanupTrackingCommon\";\n/**\n * FinalizationRegistry-based uncommitted reaction cleanup\n */\n\nexport function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {\n  var cleanupTokenToReactionTrackingMap = new Map();\n  var globalCleanupTokensCounter = 1;\n  var registry = new FinalizationRegistry(function cleanupFunction(token) {\n    var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);\n\n    if (trackedReaction) {\n      trackedReaction.reaction.dispose();\n      cleanupTokenToReactionTrackingMap.delete(token);\n    }\n  });\n  return {\n    addReactionToTrack: function addReactionToTrack(reactionTrackingRef, reaction, objectRetainedByReact) {\n      var token = globalCleanupTokensCounter++;\n      registry.register(objectRetainedByReact, token, reactionTrackingRef);\n      reactionTrackingRef.current = createTrackingData(reaction);\n      reactionTrackingRef.current.finalizationRegistryCleanupToken = token;\n      cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: function recordReactionAsCommitted(reactionRef) {\n      registry.unregister(reactionRef);\n\n      if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {\n        cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);\n      }\n    },\n    forceCleanupTimerToRunNowForTests: function forceCleanupTimerToRunNowForTests() {// When FinalizationRegistry in use, this this is no-op\n    },\n    resetCleanupScheduleForTests: function resetCleanupScheduleForTests() {// When FinalizationRegistry in use, this this is no-op\n    }\n  };\n}","map":{"version":3,"sources":["/home/rascal/Рабочий стол/git/todoList/node_modules/mobx-react-lite/src/utils/createReactionCleanupTrackingUsingFinalizationRegister.ts"],"names":[],"mappings":"AAEA,SAGI,kBAHJ,QAIO,iCAJP;AAMA;;AAEG;;AACH,OAAM,SAAU,sDAAV,CACF,oBADE,EAC0E;AAE5E,MAAM,iCAAiC,GAAG,IAAI,GAAJ,EAA1C;AACA,MAAI,0BAA0B,GAAG,CAAjC;AAEA,MAAM,QAAQ,GAAG,IAAI,oBAAJ,CAAyB,SAAS,eAAT,CAAyB,KAAzB,EAAsC;AAC5E,QAAM,eAAe,GAAG,iCAAiC,CAAC,GAAlC,CAAsC,KAAtC,CAAxB;;AACA,QAAI,eAAJ,EAAqB;AACjB,MAAA,eAAe,CAAC,QAAhB,CAAyB,OAAzB;AACA,MAAA,iCAAiC,CAAC,MAAlC,CAAyC,KAAzC;AACH;AACJ,GANgB,CAAjB;AAQA,SAAO;AACH,IAAA,kBAAkB,EAAlB,4BACI,mBADJ,EAEI,QAFJ,EAGI,qBAHJ,EAGiC;AAE7B,UAAM,KAAK,GAAG,0BAA0B,EAAxC;AAEA,MAAA,QAAQ,CAAC,QAAT,CAAkB,qBAAlB,EAAyC,KAAzC,EAAgD,mBAAhD;AACA,MAAA,mBAAmB,CAAC,OAApB,GAA8B,kBAAkB,CAAC,QAAD,CAAhD;AACA,MAAA,mBAAmB,CAAC,OAApB,CAA4B,gCAA5B,GAA+D,KAA/D;AACA,MAAA,iCAAiC,CAAC,GAAlC,CAAsC,KAAtC,EAA6C,mBAAmB,CAAC,OAAjE;AAEA,aAAO,mBAAmB,CAAC,OAA3B;AACH,KAdE;AAeH,IAAA,yBAAyB,EAAzB,mCAA0B,WAA1B,EAAuF;AACnF,MAAA,QAAQ,CAAC,UAAT,CAAoB,WAApB;;AAEA,UAAI,WAAW,CAAC,OAAZ,IAAuB,WAAW,CAAC,OAAZ,CAAoB,gCAA/C,EAAiF;AAC7E,QAAA,iCAAiC,CAAC,MAAlC,CACI,WAAW,CAAC,OAAZ,CAAoB,gCADxB;AAGH;AACJ,KAvBE;AAwBH,IAAA,iCAAiC,EAAA,6CAAA,CAC7B;AACH,KA1BE;AA2BH,IAAA,4BAA4B,EAAA,wCAAA,CACxB;AACH;AA7BE,GAAP;AA+BH","sourcesContent":["import { FinalizationRegistry as FinalizationRegistryMaybeUndefined } from \"./FinalizationRegistryWrapper\"\nimport { Reaction } from \"mobx\"\nimport {\n    ReactionCleanupTracking,\n    IReactionTracking,\n    createTrackingData\n} from \"./reactionCleanupTrackingCommon\"\n\n/**\n * FinalizationRegistry-based uncommitted reaction cleanup\n */\nexport function createReactionCleanupTrackingUsingFinalizationRegister(\n    FinalizationRegistry: NonNullable<typeof FinalizationRegistryMaybeUndefined>\n): ReactionCleanupTracking {\n    const cleanupTokenToReactionTrackingMap = new Map<number, IReactionTracking>()\n    let globalCleanupTokensCounter = 1\n\n    const registry = new FinalizationRegistry(function cleanupFunction(token: number) {\n        const trackedReaction = cleanupTokenToReactionTrackingMap.get(token)\n        if (trackedReaction) {\n            trackedReaction.reaction.dispose()\n            cleanupTokenToReactionTrackingMap.delete(token)\n        }\n    })\n\n    return {\n        addReactionToTrack(\n            reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\n            reaction: Reaction,\n            objectRetainedByReact: object\n        ) {\n            const token = globalCleanupTokensCounter++\n\n            registry.register(objectRetainedByReact, token, reactionTrackingRef)\n            reactionTrackingRef.current = createTrackingData(reaction)\n            reactionTrackingRef.current.finalizationRegistryCleanupToken = token\n            cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current)\n\n            return reactionTrackingRef.current\n        },\n        recordReactionAsCommitted(reactionRef: React.MutableRefObject<IReactionTracking | null>) {\n            registry.unregister(reactionRef)\n\n            if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {\n                cleanupTokenToReactionTrackingMap.delete(\n                    reactionRef.current.finalizationRegistryCleanupToken\n                )\n            }\n        },\n        forceCleanupTimerToRunNowForTests() {\n            // When FinalizationRegistry in use, this this is no-op\n        },\n        resetCleanupScheduleForTests() {\n            // When FinalizationRegistry in use, this this is no-op\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}